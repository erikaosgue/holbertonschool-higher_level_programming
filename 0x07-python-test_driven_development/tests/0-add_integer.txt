=============================================
Testing the function that adds two numbers
0-add_integer.py
=============================================

This library is very simple, since it only has one function called
``add_integer()``.

Numbers
=======

Returns the addition of its 2 arguments.  
For numbers, that value is equivalent to using the ``+`` operator.

::
    >>> add_integer = __import__('0-add_integer').add_integer

The arguments can be int or float with return int

    #test_1
    >>> add_integer(2, 3)
    5

    #test_2
    >>> add_integer(2.0, 3.0)
    5

    #test_3
    >>> add_integer(-3, -2)
    -5

    #test_4
    >>> add_integer(2)
    100

With Tuple, and lists or None

    #test_5
    >>> add_integer((3, 0), 1)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

    #test_6
    >>> add_integer([3, 0], 1)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

    #test_7
    >>> add_integer(None)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

With string

    #test_8
    >>> add_integer("Hola", "Bien")
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

    #test_9
    >>> add_integer(2, {})
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

    #test_10
    >>> add_integer(True, False)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

